#!/usr/bin/env node
const loadMiliConfig = require('../src/loadMiliConfig')
const cloneRepository = require('../src/cloneRepository')
const loadTemplateConfig = require('../src/loadTemplateConfig')
const extractProgectBaseInfo = require('../src/extractProgectBaseInfo')
const recommendFileEncoding = require('../src/recommendFileEncoding')
const genFileList = require('../src/genFileList')
const formatHandlers = require('../src/formatHandlers')
const genTargetPath = require('../src/genTargetPath')
const initialFolder = require('../src/initialFolder')
const checkAndFormatView = require('../src/checkAndFormatView')
const genMilirc = require('../src/genMilirc')
const copy = require('../src/copy')
const log = require('../src/log')
const { join, basename } = require('path')
const git = require('simple-git/promise')
const statusCheck = require('../src/statusCheck')
const semver = require('semver')
const throwError = require('../src/throwError')


module.exports = async (force, version) => {
  if (!force) await statusCheck(process.cwd())

  const miliConfig = await loadMiliConfig()
  const repository = miliConfig.repository

  if (!force && version && semver.lt(version, miliConfig.version)) {
    throwError([
      'The version number setted is lower than the current template version.',
      "If you're sure you want to run this command, rerun it with --force.",
    ].join('\n'))
  }

  const { templatePath: templateProjectPath, currentBranch  } = await cloneRepository(repository, miliConfig.version)
  try {
    const templateConfig = await loadTemplateConfig(templateProjectPath)

    const templatePath = join(templateProjectPath, templateConfig.path)
    const baseInfo = await extractProgectBaseInfo(join(process.cwd()))

    // basename(process.cwd())
    // OPTIMIZE: Check mili version and remind user
    // if (templateConfig.version > mili.version)

    let files = await genFileList({ path: templatePath, upgrade: 'cover', handlers: [] }, templateConfig.rules)

    const view = checkAndFormatView({
      name: baseInfo.name || basename(process.cwd()),
      repository: baseInfo.repository,
      remotes: baseInfo.remotes,
      template: { repository, version: templateConfig.version },
    })


    const targetPath = process.cwd()
    files = files
      .filter(file => file.upgrade !== 'keep')
      .map(file => ({
        ...file,
        view,
        encoding: file.encoding || recommendFileEncoding(file.path),
      }))
      .map(formatHandlers)
      .map(genTargetPath(templatePath, targetPath))


    log.info('ensure folders...')
    await initialFolder(files)

    log.info('upgrading...')
    await Promise.all(files.map(copy))
    await genMilirc(targetPath, view)

    await templateConfig.hooks('afterUpdate')
  } finally {
    await git(templateProjectPath).checkout(currentBranch )
  }
}
