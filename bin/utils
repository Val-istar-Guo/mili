#!/usr/bin/env node

const fs = require('fs')
const pify = require('pify')
const { join, dirname, basename } = require('path')
const mustache = require('mustache')


const readdir = pify(fs.readdir)
const readFile = pify(fs.readFile)
const writeFile = pify(fs.writeFile)
const stat = pify(fs.stat)
const access = pify(fs.access)
const mkdir = pify(fs.mkdir)
const readJsonFile = async (...arg) => {
  const content = await readFile(...arg)
  return JSON.parse(content)
}


const copyDir = async ({ from, to, context }) => {
  try { await access(to, fs.constants.W_OK) }
  catch (e) { await mkdir(to) }

  const files = await readdir(from, 'utf8')

  const stats = await Promise.all(files.map(filename => {
    return stat(join(from, filename)).then(stats => ({
      isDir: stats.isDirectory(),
      filename,
    }))
   }))

  return await Promise.all(stats.map(({ isDir, filename }) => {
    const param = {
      from: join(from, filename),
      to: join(to, filename),
      context,
    }

    if (isDir) return copyDir(param)
    else return copyFile(param)
  }))
}

const copyFile = async ({ from , to , context }) => {
  let content = await readFile(from, 'utf8')
  const { encoding = 'utf8' } = context

  if (/.mustache$/.test(from)) {
    content = mustache.render(content, context)
    to = to.replace(/.mustache$/, '')
  }

  if (basename(to) === 'package.json') {
    const { encoding = 'utf8' } = context
    let customContent = {}

    try {
      await access(to, fs.constants.R_OK)

      customContent = await readJsonFile(to, encoding)
    } catch (e) {
      customContent = {}
    }

    content = mergePackageJson(JSON.parse(content), customContent)
  }

  return writeFile(to, content, encoding)
}

const mergePackageJson = (content, customContent) => {
  content = {
    /**
     * NOTE: The property order of the first parameter
     *       determines the order of properties of
     *       the generated file.
     */
    ...customContent,
    ...content,
    ...customContent,
    scripts: {
      ...customContent.scripts,
      ...content.scripts,
    },
    "deploy": {
      ...customContent.deploy,
      ...content.deploy,
      ...customContent.deploy,
    },
    devDependencies: content.devDependencies,
    dependencies: {
      ...customContent.dependencies,
      ...content.dependencies,
    },
    postcss: content.postcss,
  }
  return JSON.stringify(content, null, ' ');
}

const readPackageJson = async (folder, context) => {
  const { encoding = 'utf8' } = context
  const filePath = join(folder, 'package.json')

  await access(filePath, fs.constants.R_OK)

  return await readJsonFile(filePath, encoding)
}

module.exports = { copyDir, copyFile, mergePackageJson, readPackageJson }
