#!/usr/bin/env node

const { readdirSync } = require('fs')
const { join, basename } = require('path')
const program = require('commander')
const log = require('./log')
const init = require('./init')
const upgrade = require('./upgrade')
const { version: miliVersion } = require('../package.json')


const types = readdirSync(join(__dirname, '../template')).reverse()

program
  .version('0.1.0')

program
  .command('init [app_name]')
  .description('initialize the project')
  .option('-t --type [type]', `Which app type to build.(${types.join(' | ')})`)
  .action((appName, option) => {
    if (!appName) appName = basename(process.cwd())

    const { type = 'web' } = option
    if (!types.includes(type)) {
      log.error(
        'option',
        `-t --type [type] should be one of ${types.map(t => `'${t}'`).join(', ')}, but get '${type}'.`
      )
      return
    }

    log.info('initialize project ...')
    init(type, { appName, miliVersion, encoding: 'utf8' })
      .then(() => log.info('initialize complete'))
      .catch(err => log.error('program', 'initialize break', err))
  })

program
  .command('upgrade')
  .description('upgrade the mili framework')
  .action(() => {
    log.info('upgrade project ...')
    upgrade({ miliVersion, encoding: 'utf8' })
      .then(() => log.info('upgrade complete'))
      .catch(err => log.error('program', 'initialize break', err))
  })

program.parse(process.argv)
