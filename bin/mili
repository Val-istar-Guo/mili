#!/usr/bin/env node

const { readdirSync } = require('fs')
const { join, basename } = require('path')
const program = require('commander')
const log = require('../src/log')
const init = require('./init')
const upgrade = require('./upgrade')
const update = require('./update')
const clean = require('./clean')
const { version } = require('../package.json')


program
  .version(version)

program
  .command('init [repository]')
  .usage('[options] <repository>')
  .description('initialize the project')
  .option('-n --app-name [app_name]', `Set your app name.`)
  .action((repository, option) => {
    if (!repository) program.help()

    const { appName } = option

    log.info('initialize project ...')

    return init(appName, repository)
      .then(() => log.info('initialize complete'))
      .catch(err => log.error('program', 'initialize break', err))
  })

program
  .command('upgrade')
  .description('upgrade the template')
  .action(() => {
    log.info('prepare upgrade')
    upgrade()
      .then(() => log.info('upgrade complete'))
      .catch(err => log.error('program', 'upgrade break', err))
  })

program
  .command('update')
  .description('Update the project with the current version of the template')
  .action(() => {
    log.info('prepare update')
    update()
      .then(() => log.info('update complete'))
      .catch(err => log.error('program', 'update break', err))
  })

program
  .command('clean')
  .description('Clean the cache of mili')
  .action(() => {
    log.info('begin clean')
    clean()
      .then(() => log.info('clean complete'))
      .catch(err => log.error('clean', 'clean break', err))
  })


// error on unknown commands
program.on('command:*', function () {
  log.error('command', 'Invalid command: %s\nSee --help for a list of available commands.', program.args.join(' '));
  process.exit(1);
});


program.parse(process.argv)

if (!process.argv.slice(2).length) program.help();
